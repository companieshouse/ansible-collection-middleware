#!/bin/bash

# Generate and update database statistics regarding table, row, and page-count
# in the systables system catalog table.

# -- Internal variables -------------------------------------------------------

script_name=$(basename "$0")
parent_dir="$(cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)"

informix_env_files_dir="{{ informix_management_install_path }}/etc"
informix_env_file_prefix="informix.env"

# -- General ------------------------------------------------------------------

check_service () {
    local service="${1}"

    local valid_services; valid_services=$(IFS='|' ; echo "${services[*]}")
    local pattern="^(${valid_services})$"

    if [[ ! "${service}" =~ $pattern ]]; then
        echo "Unknown service '${service}'; valid options are: ${services[*]}" >&2
        exit 1
    fi
}

discover_services () {
    services=()
    while read -r -d $'\0' env_file_path; do
        local env_file_name=$(basename "${env_file_path}" | tr '[:upper:]' '[:lower:]')
        local service_name="${env_file_name##*.}"
        services+=("${service_name}")
    done < <(find "${informix_env_files_path}" -name "${informix_env_file_prefix}.*" -print0 2>/dev/null | sort -z)
}

unset_informix_env_vars () {
    for env_var in INFORMIXSERVER INFORMIXDIR ONCONFIG INFORMIXSQLHOSTS; do
        unset "${env_var}"
    done
}

check_informix_env_vars () {
    local missing_env_vars=()

    for env_var in INFORMIXSERVER INFORMIXDIR ONCONFIG INFORMIXSQLHOSTS; do
        if [[ -z "${!env_var}" ]]; then
            missing_env_vars+=("${env_var}")
        fi
    done

    if [[ "{{ '${#missing_env_vars[@]}' }}" -gt 0 ]]; then
        for env_var in "${missing_env_vars[@]}"; do
            error "Missing environment variable '${env_var}'"
        done

        error "Aborting"
        exit 1
    fi
}

check_informix_config () {
    local env_file_path="${informix_env_files_dir}/${informix_env_file_prefix}.${service}"

    if [[ ! -f "${env_file_path}" ]]; then
        error "No configuration file at '${env_file_path}'"
        exit 1
    fi
}

source_informix_config () {
    local env_file_path="${informix_env_files_dir}/${informix_env_file_prefix}.${service}"

    source "${env_file_path}"
    if [[ $? -ne 0 ]]; then
        error "Unable to load Informix database configuration from '${env_file_path}'"
        exit 1
    fi
}

set_database_name () {
    case "${service}" in
        'dps')
            database="image"
            ;;
        'ef')
            database="ef_db"
            ;;
        *)
            database="${service}"
            ;;
    esac
}

update_database_statistics () {
    info "Starting ${database} database update"

    dbaccess "${database}" - >/dev/null 2>&1 <<EOF
update statistics high
EOF
    exit_on_error "$?" "dbaccess returned $? (${FUNCNAME[0]}:${LINENO})"

    info "Finished ${database} database update"
}

load_logging_functions () {
    source "${parent_dir}/logging"
    if [[ $? -ne 0 ]]; then
        echo "${script_name}: Unable to source logging functions into environment" >&2
        exit 1
    fi

    initialise_logging
}

exit_on_error () {
    local exit_code="${1}"
    local message="${2}"
    if [[ "${exit_code}" -ne 0 ]]; then
        error "${message}"
        exit "${exit_code}"
    fi
}

# -- Entrypoint ---------------------------------------------------------------

main () {
    local service="${1}"

    if [[ -z "${service}" ]]; then
        echo "Usage: ${script_name} <service-name>" >&2
        exit 1
    fi

    discover_services

    check_service "${service}"

    load_logging_functions
    
    log_file="{{ informix_management_logs_path }}/${service}/${script_name}.log"

    check_informix_config
    unset_informix_env_vars
    source_informix_config
    check_informix_env_vars

    set_database_name
    update_database_statistics
}

main "${@}"
